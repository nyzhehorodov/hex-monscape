namespace: hex-monscape

mysql:
  defines: runnable
  inherits: monk-mysql/db
  metadata:
    name: mysql
    description: MySQL database service.
    icon: https://labs.mysql.com/common/logos/mysql-logo.svg?v2
  variables:
    image_tag:
      type: string
      value: latest
      description: ''
    monk_mysql_database:
      type: string
      value: monk
      description: ''
    monk_mysql_password:
      type: string
      value: monk
      description: ''
    monk_mysql_root_password:
      type: string
      value: monk
      description: ''
    monk_mysql_user:
      type: string
      value: monk
      description: ''

client:
  defines: runnable
  metadata:
    name: client
    description: Web frontend service.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    client:
      image: env-2059.registry.local/client:master-51cea85
      build: .
      dockerfile: build/package/client/Dockerfile
  services: {}
  connections: {}
  variables:
    vite-api-stage-path:
      env: VITE_API_STAGE_PATH
      type: string
      value: /api
      description: The base path for the API stage

server:
  defines: runnable
  metadata:
    name: server
    description: Backend server service.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    server:
      image: env-2059.registry.local/server:master-51cea85
      build: .
      dockerfile: build/package/server/Dockerfile
  services:
    server-port:
      description: Port on which the server service listens
      container: server
      port: $port
      host-port: $port
      publish: true
      protocol: tcp
  connections: {}
  variables:
    port:
      env: PORT
      type: string
      value: 9186
      description: Port on which the server service runs
    storage-type:
      env: STORAGE_TYPE
      type: string
      value: memory
      description: Type of storage to use, can be 'memory', 'mysql', or 'dynamodb'
    monster-data-path:
      env: MONSTER_DATA_PATH
      type: string
      value: /data/monsters
      description: Path to the monster data, used when storage type is 'memory'
    localstack-endpoint:
      env: LOCALSTACK_ENDPOINT
      type: string
      value: http://localstack:4566
      description: Endpoint for localstack when using DynamoDB storage type
    battle-table-name:
      env: BATTLE_TABLE_NAME
      type: string
      value: battles
      description: DynamoDB table name for battles
    game-table-name:
      env: GAME_TABLE_NAME
      type: string
      value: games
      description: DynamoDB table name for games
    monster-table-name:
      env: MONSTER_TABLE_NAME
      type: string
      value: monsters
      description: DynamoDB table name for monsters
    sql-dsn:
      env: SQL_DSN
      type: string
      value: mysql://monk:monk@mysql:3306/monk
      description: Data Source Name for MySQL connection

lambda:
  defines: runnable
  metadata:
    name: lambda
    description: Lambda service for serverless functions.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    lambda:
      image: env-2059.registry.local/lambda:master-51cea85
      build: .
      dockerfile: build/package/lambda/Dockerfile
  services:
    http-server:
      description: HTTP server listening port
      container: lambda
      port: 9186
      host-port: 9186
      publish: true
      protocol: tcp
  connections:
    localstack-connection:
      target: hex-monscape/localstack
      service: localstack-main
      optional: true
      description: Connection to Localstack for local AWS services emulation
    dynamodb-battle-table:
      target: hex-monscape/dynamodb
      service: dynamodb-battle
      optional: true
      description: Connection to DynamoDB for battle table data
    dynamodb-game-table:
      target: hex-monscape/dynamodb
      service: dynamodb-game
      optional: true
      description: Connection to DynamoDB for game table data
    dynamodb-monster-table:
      target: hex-monscape/dynamodb
      service: dynamodb-monster
      optional: true
      description: Connection to DynamoDB for monster table data
  variables:
    localstack-endpoint:
      env: LOCALSTACK_ENDPOINT
      type: string
      value: <- connection-hostname("localstack-connection")
      description: Endpoint for localstack, used for local development
    dynamodb-battle-table:
      env: DYNAMODB_BATTLE_TABLE
      type: string
      value: <- connection-hostname("dynamodb-battle-table")
      description: DynamoDB table name for battle data
    dynamodb-game-table:
      env: DYNAMODB_GAME_TABLE
      type: string
      value: <- connection-hostname("dynamodb-game-table")
      description: DynamoDB table name for game data
    dynamodb-monster-table:
      env: DYNAMODB_MONSTER_TABLE
      type: string
      value: <- connection-hostname("dynamodb-monster-table")
      description: DynamoDB table name for monster data

localstack:
  defines: runnable
  metadata:
    name: localstack
    description: Local AWS stack, emulating cloud services like DynamoDB.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    localstack:
      image: localstack/localstack
      build: .
  services:
    localstack-main:
      description: Main entry point for all LocalStack services
      container: localstack
      port: 4566
      host-port: 4566
      publish: true
      protocol: tcp
  connections:
    localstack-to-server:
      target: hex-monscape/server
      service: server-port
      optional: true
      description: >-
        Connection from LocalStack to the server service for DynamoDB
        integration
    localstack-to-lambda:
      target: hex-monscape/lambda
      service: http-server
      optional: true
      description: >-
        Connection from LocalStack to the lambda service for serverless function
        integration
  variables:
    aws-default-region:
      env: AWS_DEFAULT_REGION
      type: string
      value: eu-west-1
      description: Default AWS region for LocalStack services
    aws-access-key-id:
      env: AWS_ACCESS_KEY_ID
      type: string
      value: awslocal
      description: AWS access key ID for LocalStack services
    aws-secret-access-key:
      env: AWS_SECRET_ACCESS_KEY
      type: string
      value: awslocal
      description: AWS secret access key for LocalStack services

stack:
  defines: group
  members:
    - hex-monscape/mysql
    - hex-monscape/client
    - hex-monscape/server
    - hex-monscape/lambda
    - hex-monscape/localstack
